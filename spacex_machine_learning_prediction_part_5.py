# -*- coding: utf-8 -*-
"""Kopia notatnika SpaceX_Machine Learning Prediction_Part_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LAMhakd3oTZMLXYK6ltf2FI461QnT-Ls

<p style="text-align:center">
    <a href="https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDS0321ENSkillsNetwork26802033-2022-01-01" target="_blank">
    <img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png" width="200" alt="Skills Network Logo">
    </a>
</p>

# **Space X  Falcon 9 First Stage Landing Prediction**

## Assignment:  Machine Learning Prediction

Estimated time needed: **60** minutes

Space X advertises Falcon 9 rocket launches on its website with a cost of 62 million dollars; other providers cost upward of 165 million dollars each, much of the savings is because Space X can reuse the first stage. Therefore if we can determine if the first stage will land, we can determine the cost of a launch. This information can be used if an alternate company wants to bid against space X for a rocket launch.   In this lab, you will create a machine learning pipeline  to predict if the first stage will land given the data from the preceding labs.

![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/Images/landing_1.gif)

Several examples of an unsuccessful landing are shown here:

![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/Images/crash.gif)

Most unsuccessful landings are planed. Space X; performs a controlled landing in the oceans.

## Objectives

Perform exploratory  Data Analysis and determine Training Labels

*   create a column for the class
*   Standardize the data
*   Split into training data and test data

\-Find best Hyperparameter for SVM, Classification Trees and Logistic Regression

*   Find the method performs best using test data

## Import Libraries and Define Auxiliary Functions
"""

import numpy
import pandas
import seaborn

"""We will import the following libraries for the lab

"""

# Pandas is a software library written for the Python programming language for data manipulation and analysis.
import pandas as pd
# NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays
import numpy as np
# Matplotlib is a plotting library for python and pyplot gives us a MatLab like plotting framework. We will use this in our plotter function to plot data.
import matplotlib.pyplot as plt
#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics
import seaborn as sns
# Preprocessing allows us to standarsize our data
from sklearn import preprocessing
# Allows us to split our data into training and testing data
from sklearn.model_selection import train_test_split
# Allows us to test parameters of classification algorithms and find the best one
from sklearn.model_selection import GridSearchCV
# Logistic Regression classification algorithm
from sklearn.linear_model import LogisticRegression
# Support Vector Machine classification algorithm
from sklearn.svm import SVC
# Decision Tree classification algorithm
from sklearn.tree import DecisionTreeClassifier
# K Nearest Neighbors classification algorithm
from sklearn.neighbors import KNeighborsClassifier

"""This function is to plot the confusion matrix.

"""

def plot_confusion_matrix(y,y_predict):
    "this function plots the confusion matrix"
    from sklearn.metrics import confusion_matrix

    cm = confusion_matrix(y, y_predict)
    ax= plt.subplot()
    sns.heatmap(cm, annot=True, ax = ax);
    ax.set_xlabel('Predicted labels')
    ax.set_ylabel('True labels')
    ax.set_title('Confusion Matrix');
    ax.xaxis.set_ticklabels(['did not land', 'land']); ax.yaxis.set_ticklabels(['did not land', 'landed'])
    plt.show()

"""## Load the dataframe

Load the data
"""

!pip install requests

import requests
import pandas as pd
from io import StringIO
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"
response = requests.get(url)
if response.status_code == 200:
    data = pd.read_csv(StringIO(response.text))
    print(data.head())
else:
    print("Failed to fetch data:", response.status_code)

data.head()

print(data.index)

data.info()

import requests
import pandas as pd
from io import StringIO
URL2 = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_3.csv'
response = requests.get(URL2)
if response.status_code == 200:
    text = response.text
    X = pd.read_csv(StringIO(text))
    print(X.head())
else:
    print(f"Failed to fetch data: {response.status_code}")

X.head(5)

"""## TASK  1

Create a NumPy array from the column <code>Class</code> in <code>data</code>, by applying the method <code>to_numpy()</code>  then
assign it  to the variable <code>Y</code>,make sure the output is a  Pandas series (only one bracket df\['name of  column']).
"""

Y=data['Class'].to_numpy()
print(Y)

"""## TASK  2

Standardize the data in <code>X</code> then reassign it to the variable  <code>X</code> using the transform provided below.
"""

transform = preprocessing.StandardScaler()
X = transform.fit_transform(X)

"""We split the data into training and testing data using the  function  <code>train_test_split</code>.   The training data is divided into validation data, a second set used for training  data; then the models are trained and hyperparameters are selected using the function <code>GridSearchCV</code>.

## TASK  3

Use the function train_test_split to split the data X and Y into training and test data. Set the parameter test_size to  0.2 and random_state to 2. The training data and test data should be assigned to the following labels.

<code>X_train, X_test, Y_train, Y_test</code>
"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2,random_state=2)

"""we can see we only have 18 test samples.

"""

Y_test.shape

"""## TASK  4

Create a logistic regression object  then create a  GridSearchCV object  <code>logreg_cv</code> with cv = 10.  Fit the object to find the best parameters from the dictionary <code>parameters</code>.
"""

parameters ={'C':[0.01,0.1,1],
             'penalty':['l2'],
             'solver':['lbfgs']}

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
parameters ={"C":[0.01,0.1,1],'penalty':['l2'], 'solver':['lbfgs']}# l1 lasso l2 ridge
logreg=LogisticRegression()
logreg_cv = GridSearchCV(logreg, parameters, cv=10)
logreg_cv.fit(X_train, Y_train)

"""We output the <code>GridSearchCV</code> object for logistic regression. We display the best parameters using the data attribute <code>best_params\_</code> and the accuracy on the validation data using the data attribute <code>best_score\_</code>.

"""

print("Tuned Hyperparameters (Best Parameters):", logreg_cv.best_params_)
print("Accuracy:", logreg_cv.best_score_)

"""## TASK  5

Calculate the accuracy on the test data using the method <code>score</code>:
"""

test_accuracy = logreg_cv.score(X_test, Y_test)
test_accuracy

"""Lets look at the confusion matrix:

"""

yhat=logreg_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)

"""Examining the confusion matrix, we see that logistic regression can distinguish between the different classes.  We see that the major problem is false positives.

## TASK  6

Create a support vector machine object then  create a  <code>GridSearchCV</code> object  <code>svm_cv</code> with cv = 10.  Fit the object to find the best parameters from the dictionary <code>parameters</code>.
"""

parameters = {'kernel':('linear', 'rbf','poly','rbf', 'sigmoid'),
              'C': np.logspace(-3, 3, 5),
              'gamma':np.logspace(-3, 3, 5)}
svm = SVC()

parameters = {
    'C': [0.1, 1, 10],
    'kernel': ['linear', 'rbf', 'poly'],
    'gamma': ['scale', 'auto']
}
svm_cv = GridSearchCV(svm, parameters, cv=10)
svm_cv.fit(X_train, Y_train)

print("tuned hpyerparameters :(best parameters) ",svm_cv.best_params_)
print("accuracy :",svm_cv.best_score_)

"""## TASK  7

Calculate the accuracy on the test data using the method <code>score</code>:
"""

test_accuracy = svm_cv.score(X_test, Y_test)
print("Accuracy on Test Data:", test_accuracy)

"""We can plot the confusion matrix

"""

yhat=svm_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)

"""## TASK  8

Create a decision tree classifier object then  create a  <code>GridSearchCV</code> object  <code>tree_cv</code> with cv = 10.  Fit the object to find the best parameters from the dictionary <code>parameters</code>.
"""

parameters = {'criterion': ['gini', 'entropy'],
     'splitter': ['best', 'random'],
     'max_depth': [2*n for n in range(1,10)],
     'max_features': ['auto', 'sqrt'],
     'min_samples_leaf': [1, 2, 4],
     'min_samples_split': [2, 5, 10]}

tree = DecisionTreeClassifier()

dt_classifier = DecisionTreeClassifier()
parameters = {
    'max_depth': [5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}
tree_cv = GridSearchCV(dt_classifier, parameters, cv=10)
tree_cv.fit(X_train, Y_train)

print("tuned hpyerparameters :(best parameters) ",tree_cv.best_params_)
print("accuracy :",tree_cv.best_score_)

"""## TASK  9

Calculate the accuracy of tree_cv on the test data using the method <code>score</code>:
"""

test_accuracy = tree_cv.score(X_test, Y_test)
print("Accuracy on Test Data:", test_accuracy)

"""We can plot the confusion matrix

"""

yhat = tree_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)

"""## TASK  10

Create a k nearest neighbors object then  create a  <code>GridSearchCV</code> object  <code>knn_cv</code> with cv = 10.  Fit the object to find the best parameters from the dictionary <code>parameters</code>.
"""

parameters = {'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],
              'p': [1,2]}

knn = KNeighborsClassifier()

knn_cv = GridSearchCV(knn, parameters, cv=10)

knn_cv.fit(X_train, Y_train)

print("tuned hpyerparameters :(best parameters) ",knn_cv.best_params_)
print("accuracy :",knn_cv.best_score_)

"""## TASK  11

Calculate the accuracy of knn_cv on the test data using the method <code>score</code>:
"""

accuracy = knn_cv.score(X, Y)
accuracy

"""We can plot the confusion matrix

"""

yhat = knn_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)

"""## TASK  12

Find the method performs best:
"""

Decision tree classifier

"""## Additional findings

#Machine learning model validation for Decision tree classifier
"""

from sklearn.model_selection import cross_val_score, cross_val_predict

best_model = tree_cv.best_estimator_

cross_val_score(best_model,X_train,Y_train)

cross_val_predict(best_model,X_train,Y_train)

from sklearn.model_selection import cross_val_score,cross_val_predict
best_model = tree_cv.best_estimator_
cv_scores = cross_val_score(best_model, X_train, Y_train, cv=10)
cv_pred = cross_val_predict(best_model, X_train, Y_train, cv=10)
print("Croos validation: ", cv_scores)
print("Croos pred: ", cv_pred)
print("Average prediction: ", cv_scores.mean())
print("Standard deviation: ", cv_scores.std())

"""# Creating predictions from model"""

import sys
sys.path.append('/path/to/eli5')

# Commented out IPython magic to ensure Python compatibility.
# %pip install eli5

import eli5
print(eli5.__version__)

from eli5 import format_as_dataframe
best_tree = tree_cv.best_estimator_
explanation = eli5.explain_weights(best_tree)
explanation_df = format_as_dataframe(explanation)
print(explanation_df)
explanation_df.to_csv('decision_tree_weights.csv', index=False)

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
import shap

X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=42)

best_model = DecisionTreeClassifier(max_depth=10, min_samples_leaf=2, min_samples_split=5)
best_model.fit(X_train, Y_train)

explainer = shap.Explainer(best_model)
shap_values = explainer(X_val)

explanation = eli5.explain_weights(best_model)
explanation_df = eli5.format_as_dataframe(explanation)
print("Tuned Hyperparameters (Best Parameters):", best_model.get_params())
print("Accuracy on validation set:", best_model.score(X_val, Y_val))
print("\nSHAP Values:")
shap.summary_plot(shap_values, X_val)

print("\nFeature Importances (eli5):")
print(explanation_df)
explanation_df.to_csv('decision_tree_weights.csv', index=False)

"""## Authors

[Pratiksha Verma](https://www.linkedin.com/in/pratiksha-verma-6487561b1/)
"""

data = {
    'feature': ['x81', 'x4', 'x9', 'x80', 'x2', 'x1', 'x21', 'x36', 'x24', 'x25',
                'x31', 'x28', 'x33', 'x30', 'x37', 'x32', 'x35', 'x29', 'x27', 'x26'],
    'weight': [0.635423, 0.235328, 0.051673, 0.024909, 0.023613, 0.017433,
               0.011622, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
               0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
               0.000000, 0.000000]
}

explanation_df = pd.DataFrame(data)
highest_weight_feature = explanation_df.loc[explanation_df['weight'].idxmax()]
print(f"The feature with the highest weight is '{highest_weight_feature['feature']}' "
      f"with a weight of {highest_weight_feature['weight']}.")

"""## Change Log

| Date (YYYY-MM-DD) | Version | Changed By      | Change Description      |
| ----------------- | ------- | -------------   | ----------------------- |
| 2022-11-09        | 1.0     | Pratiksha Verma | Converted initial version to Jupyterlite|

### <h3 align="center"> IBM Corporation 2022. All rights reserved. <h3/>
"""